<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with <%= otherUser.nickname || otherUser.email %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Socket.IO Client Library -->
    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            color: #333;
            min-height: 100vh;
        }
        .message-container {
            width: 100%;
            max-width: 600px;
            margin-bottom: 20px;
            text-align: center;
        }
        .alert {
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 8px;
            font-weight: bold;
        }
        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .chat-header {
            width: 100%;
            max-width: 600px;
            background-color: #fff;
            padding: 15px 20px;
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 20px;
        }
        .chat-header img {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            object-fit: cover;
            border: 2px solid #007bff;
        }
        .chat-header h2 {
            margin: 0;
            font-size: 1.5em;
            flex-grow: 1;
        }
        .chat-box {
            background-color: #fff;
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 600px;
            display: flex;
            flex-direction: column;
            flex-grow: 1;
            min-height: 400px;
        }
        .messages-area {
            flex-grow: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }
        .message {
            display: flex;
            margin-bottom: 15px;
            align-items: flex-end;
        }
        .message.sent {
            justify-content: flex-end;
        }
        .message.received {
            justify-content: flex-start;
        }
        .message-bubble {
            max-width: 70%;
            padding: 12px 18px;
            border-radius: 20px;
            line-height: 1.4;
            word-wrap: break-word;
            font-size: 0.95em;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        .message.sent .message-bubble {
            background-color: #007bff;
            color: white;
            border-bottom-right-radius: 5px;
        }
        .message.received .message-bubble {
            background-color: #e0e0e0;
            color: #333;
            border-bottom-left-radius: 5px;
        }
        .message-time {
            font-size: 0.75em;
            color: #888;
            margin-top: 5px;
            text-align: right;
        }
        .message.received .message-time {
            text-align: left;
        }
        .message-input-form {
            display: flex;
            padding: 15px 20px;
            border-top: 1px solid #eee;
            gap: 10px;
        }
        .message-input-form input[type="text"] {
            flex-grow: 1;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 25px;
            font-size: 1em;
        }
        .message-input-form button {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1em;
            transition: background-color 0.2s ease;
        }
        .message-input-form button:hover {
            background-color: #218838;
        }
        .back-link {
            margin-top: 20px;
            color: #007bff;
            text-decoration: none;
            font-weight: bold;
        }
        .back-link:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>

<div class="message-container">
    <% if (success_msg && success_msg.length > 0) { %>
        <div class="alert alert-success">
            <%= success_msg %>
        </div>
    <% } %>
    <% if (error_msg && error_msg.length > 0) { %>
        <div class="alert alert-danger">
            <%= error_msg %>
        </div>
    <% } %>
</div>

<div class="chat-header">
    <a href="/messages"><i class="fas fa-arrow-left" style="font-size: 1.5em; color: #555;"></i></a> <!-- Link back to inbox -->
    <img src="<%= otherUser.profilePic.startsWith('/') ? otherUser.profilePic : '/uploads/profile_pics/' + otherUser.profilePic %>" 
         alt="<%= otherUser.nickname || otherUser.email %>'s Profile" onerror="this.src='/default_profile.jpg'">
    <h2><%= otherUser.nickname || otherUser.email %></h2>
</div>

<div class="chat-box">
    <div class="messages-area" id="messagesArea">
        <!-- Chat messages will be displayed here directly from EJS -->
        <% if (messages && messages.length > 0) { %>
            <% messages.forEach(message => { %>
                <div class="message <%= message.sender._id.toString() === user._id.toString() ? 'sent' : 'received' %>">
                    <div class="message-bubble">
                        <%= message.content %>
                        <div class="message-time"><%= new Date(message.createdAt).toLocaleString() %></div>
                    </div>
                </div>
            <% }) %>
        <% } else { %>
            <p style="text-align: center; color: #777;">Start a new conversation!</p>
        <% } %>
    </div>
    <form class="message-input-form" id="messageForm">
        <input type="text" id="messageInput" placeholder="Type a message..." autocomplete="off" required>
        <button type="submit">Send</button>
    </form>
</div>

<a href="/messages" class="back-link">Back to Inbox</a> <!-- Link back to inbox -->

<script>
    // Get user IDs from EJS variables
    const currentUserId = "<%= user._id %>";
    const otherUserId = "<%= otherUser._id %>";
    // Profile pics for displaying messages dynamically (Socket.IO)
    const otherUserProfilePic = "<%= otherUser.profilePic.startsWith('/') ? otherUser.profilePic : '/uploads/profile_pics/' + otherUser.profilePic %>";
    const currentUserProfilePic = "<%= user.profilePic.startsWith('/') ? user.profilePic : '/uploads/profile_pics/' + user.profilePic %>";

    const messagesArea = document.getElementById('messagesArea');
    const messageForm = document.getElementById('messageForm');
    const messageInput = document.getElementById('messageInput');

    // Initialize Socket.IO connection
    const socket = io('<%= process.env.CLIENT_URL || "http://localhost:3000" %>', {
        withCredentials: true
    });

    socket.on('connect', () => {
        console.log('Connected to Socket.IO server');
        // Join the specific chat room when connected
        socket.emit('join_chat', otherUserId);
        // No need to call fetchChatHistory() here anymore, as history is rendered by EJS
    });

    socket.on('disconnect', () => {
        console.log('Disconnected from Socket.IO server');
    });

    socket.on('receive_message', (message) => {
        // Add new real-time message to chat
        addMessageToChat(message);
        scrollToBottom();
    });

    socket.on('dm_error', (errorMessage) => {
        alert(errorMessage);
        console.error('DM Error:', errorMessage);
    });

    messageForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const content = messageInput.value.trim();
        if (content) {
            socket.emit('send_message', { recipientId: otherUserId, content: content });
            messageInput.value = '';
        }
    });

    function addMessageToChat(message) {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message');
        messageElement.classList.add(message.sender._id.toString() === currentUserId ? 'sent' : 'received');

        messageElement.innerHTML = `
            <div class="message-bubble">
                ${message.content}
                <div class="message-time">${new Date(message.createdAt).toLocaleString()}</div>
            </div>
        `;
        messagesArea.appendChild(messageElement);
    }

    function scrollToBottom() {
        messagesArea.scrollTop = messagesArea.scrollHeight;
    }

    // Initial scroll to bottom after EJS renders the history
    window.onload = scrollToBottom;
</script>

</body>
</html>
