<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home - Social Media</title>
    <!-- Include Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Socket.IO Client Library -->
    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            color: #333;
        }
        h1, h2, h3 {
            color: #222;
            margin-bottom: 15px;
        }
        .message-container {
            width: 100%;
            max-width: 600px;
            margin-bottom: 20px;
            text-align: center;
        }
        .alert {
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 8px;
            font-weight: bold;
        }
        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .top-bar {
            width: 100%;
            max-width: 600px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            background-color: #fff;
            padding: 15px 25px;
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            position: relative;
        }
        .profile-header {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .profile-pic-small {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            object-fit: cover;
            border: 2px solid #ddd;
        }
        .icon-group {
            display: flex;
            gap: 15px;
            align-items: center;
        }
        .notification-icon-container, .dm-icon-container, .chatbot-icon-container { /* Added .chatbot-icon-container */
            position: relative;
            cursor: pointer;
            padding: 10px;
        }
        .notification-icon, .dm-icon, .chatbot-icon { /* Added .chatbot-icon */
            font-size: 1.8em;
            color: #555;
        }
        .notification-badge, .dm-badge {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: #e74c3c;
            color: white;
            border-radius: 50%;
            padding: 3px 7px;
            font-size: 0.7em;
            font-weight: bold;
            line-height: 1;
        }
        .notifications-dropdown {
            display: none;
            position: absolute;
            top: 100%;
            right: 0;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.2);
            z-index: 1000;
            min-width: 300px;
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #eee;
            padding: 10px;
            margin-top: 10px;
        }
        .notifications-dropdown.show {
            display: block;
        }
        .notifications-dropdown h3 {
            margin-top: 0;
            margin-bottom: 10px;
            font-size: 1.2em;
            color: #333;
            text-align: left;
        }
        .notification-item {
            display: flex;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #eee;
            text-decoration: none;
            color: #333;
            transition: background-color 0.2s ease;
        }
        .notification-item:last-child {
            border-bottom: none;
        }
        .notification-item:hover {
            background-color: #f0f2f5;
        }
        .notification-item.unread {
            background-color: #e6f7ff;
        }
        .notification-item img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 10px;
        }
        .notification-content {
            flex-grow: 1;
            font-size: 0.9em;
        }
        .notification-content strong {
            color: #007bff;
        }
        .notification-content .time {
            display: block;
            font-size: 0.8em;
            color: #888;
            margin-top: 3px;
        }
        .no-notifications {
            padding: 10px;
            color: #777;
            text-align: center;
        }
        .post-card {
            background-color: #fff;
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            padding: 20px;
            width: 100%;
            max-width: 600px;
        }
        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
        }
        .user-info img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }
        .post-image img {
            width: 100%;
            height: auto;
            border-radius: 10px;
            margin-bottom: 15px;
        }
        .caption {
            margin-bottom: 15px;
            color: #555;
        }
        .caption small {
            color: #888;
            font-size: 0.85em;
        }
        .post-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #eee;
        }
        .post-actions button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9em;
            transition: background-color 0.2s ease;
        }
        .post-actions button:hover {
            background-color: #0056b3;
        }
        .post-actions .delete-button {
            background-color: #dc3545;
        }
        .post-actions .delete-button:hover {
            background-color: #c82333;
        }
        .like-section {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .like-button {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 1.5em;
            color: #ccc;
            transition: color 0.2s ease;
        }
        .like-button.liked {
            color: #e74c3c;
        }
        .like-count {
            font-weight: bold;
            color: #555;
        }
        .comments-section {
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid #eee;
        }
        .comment-input-form {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        .comment-input-form input[type="text"] {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 0.9em;
        }
        .comment-input-form button {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9em;
            transition: background-color 0.2s ease;
        }
        .comment-input-form button:hover {
            background-color: #218838;
        }
        .comment-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .comment-item {
            background-color: #f9f9f9;
            padding: 10px 15px;
            border-radius: 10px;
            margin-bottom: 10px;
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        .comment-author {
            font-weight: bold;
            color: #333;
            font-size: 0.9em;
        }
        .comment-text {
            color: #555;
            font-size: 0.9em;
        }
        .comment-date {
            color: #888;
            font-size: 0.75em;
        }
        .plus-icon {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background-color: #007bff;
            color: white;
            font-size: 2em;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            text-decoration: none;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            transition: background-color 0.2s ease;
        }
        .plus-icon:hover {
            background-color: #0056b3;
        }
        .logout-link {
            margin-top: 30px;
            color: #007bff;
            text-decoration: none;
            font-weight: bold;
        }
        .logout-link:hover {
            text-decoration: underline;
        }
        .all-users-section {
            background-color: #fff;
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            margin-top: 30px;
            padding: 20px;
            width: 100%;
            max-width: 600px;
        }
        .user-list {
            list-style: none;
            padding: 0;
            margin: 0;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 15px;
            justify-content: center;
        }
        .user-list-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-decoration: none;
            color: #333;
            padding: 10px;
            border-radius: 10px;
            transition: background-color 0.2s ease;
        }
        .user-list-item:hover {
            background-color: #f0f2f5;
        }
        .user-list-item img {
            width: 70px;
            height: 70px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 8px;
            border: 2px solid #eee;
        }
        .user-list-item strong {
            font-size: 0.9em;
            text-align: center;
            word-break: break-word;
        }
    </style>
</head>
<body>

<div class="message-container">
    <% if (success_msg && success_msg.length > 0) { %>
        <div class="alert alert-success">
            <%= success_msg %>
        </div>
    <% } %>
    <% if (error_msg && error_msg.length > 0) { %>
        <div class="alert alert-danger">
            <%= error_msg %>
        </div>
    <% } %>
</div>

<div class="top-bar">
    <div class="profile-header">
        <a href="/profile">
            <img src="<%= user.profilePic %>" alt="Profile" class="profile-pic-small">
        </a>
        <h1>Welcome, <%= user.nickname || user.email %>!</h1>
    </div>

    <div class="icon-group">
        <div class="notification-icon-container" onclick="toggleNotifications()">
            <i class="fas fa-bell notification-icon"></i>
            <% if (unreadNotificationsCount > 0) { %>
                <span class="notification-badge" id="notificationBadgeCount"><%= unreadNotificationsCount %></span>
            <% } else { %>
                <span class="notification-badge" id="notificationBadgeCount" style="display:none;">0</span>
            <% } %>
            <div class="notifications-dropdown" id="notificationsDropdown">
                <h3>Notifications</h3>
                <div id="notificationList">
                    <p class="no-notifications">Loading notifications...</p>
                </div>
            </div>
        </div>

        <a href="/messages" class="dm-icon-container">
            <i class="fas fa-paper-plane dm-icon"></i>
            <% if (dmUnreadCount > 0) { %>
                <span class="dm-badge" id="dmBadgeCount"><%= dmUnreadCount %></span>
            <% } else { %>
                <span class="dm-badge" id="dmBadgeCount" style="display:none;">0</span>
            <% } %>
        </a>

        <a href="/chatbot" class="chatbot-icon-container"> <!-- NEW: Chatbot Icon -->
            <i class="fas fa-robot chatbot-icon"></i> <!-- You can also use fa-comments or fa-robot -->
        </a>
    </div>
</div>

<h2>Latest Posts</h2>

<% posts.forEach(post => { %>
  <div class="post-card">

    <div class="user-info">
      <% if (post.userId && post.userId.profilePic) { %>
        <img src="<%= post.userId.profilePic.startsWith('/') ? post.userId.profilePic : '/uploads/' + post.userId.profilePic %>" 
             alt="profile" width="40" height="40" style="border-radius: 50%;">
        <strong><%= post.userId.nickname || 'No name' %></strong>
      <% } else { %>
        <img src="/default_profile.jpg" width="40" height="40" style="border-radius: 50%;">
        <strong>Unknown User</strong>
      <% } %>
    </div>

    <div class="post-image">
      <img src="/uploads/<%= post.image %>" alt="post">
    </div>

    <div class="caption">
      <p><%= post.caption %></p>
      <small><%= new Date(post.createdAt).toLocaleString() %></small>
    </div>

    <div class="post-actions">
      <div class="like-section">
        <% 
            const isLiked = post.likes.some(likeUserId => user && likeUserId.toString() === user._id.toString());
            const heartClass = isLiked ? 'fas fa-heart liked' : 'far fa-heart';
        %>
        <form action="/posts/like/<%= post._id %>" method="POST" style="display:inline;">
          <button type="submit" class="like-button">
            <i class="<%= heartClass %>"></i>
          </button>
        </form>
        <span class="like-count"><%= post.likes.length %> Likes</span>
      </div>

      <% if (post.userId && user && post.userId._id.toString() === user._id.toString()) { %>
        <form action="/posts/delete/<%= post._id %>" method="POST" onsubmit="return confirm('Are you sure you want to delete this post?');" style="display:inline;">
          <button type="submit" class="delete-button">Delete</button>
        </form>
      <% } %>
    </div>

    <div class="comments-section">
      <h3>Comments</h3>
      <form action="/posts/comment/<%= post._id %>" method="POST" class="comment-input-form">
        <input type="text" name="commentText" placeholder="Add a comment..." required>
        <button type="submit">Comment</button>
      </form>

      <ul class="comment-list">
        <% if (post.comments && post.comments.length > 0) { %>
          <% post.comments.forEach(comment => { %>
            <li class="comment-item">
              <span class="comment-author"><%= comment.userId ? (comment.userId.nickname || comment.userId.email) : 'Unknown User' %></span>
              <span class="comment-text"><%= comment.text %></span>
              <small class="comment-date"><%= new Date(comment.createdAt).toLocaleString() %></small>
            </li>
          <% }) %>
        <% } else { %>
          <p>No comments yet.</p>
        <% } %>
      </ul>
    </div>
  </div>
<% }) %>

<a href="/posts/create" class="plus-icon">+</a>

<div class="all-users-section">
    <h2>Discover Users</h2>
    <% if (allUsers && allUsers.length > 0) { %>
        <div class="user-list">
            <% allUsers.forEach(otherUser => { %>
                <% if (otherUser._id.toString() !== user._id.toString()) { %>
                    <a href="/profile/<%= otherUser._id %>" class="user-list-item">
                        <img src="<%= otherUser.profilePic.startsWith('/') ? otherUser.profilePic : '/uploads/profile_pics/' + otherUser.profilePic %>" 
                             alt="<%= otherUser.nickname || otherUser.email %>'s Profile" onerror="this.src='/default_profile.jpg'">
                        <strong><%= otherUser.nickname || otherUser.email %></strong>
                    </a>
                <% } %>
            <% }) %>
        </div>
    <% } else { %>
        <p>No other users to display.</p>
    <% } %>
</div>


<a href="/logout" class="logout-link">Logout</a>

<script>
    // Socket.IO client setup for real-time DM badge updates
    const socket = io('<%= process.env.CLIENT_URL || "http://localhost:3000" %>', {
        withCredentials: true
    });

    const dmBadgeCount = document.getElementById('dmBadgeCount');
    const notificationBadgeCount = document.getElementById('notificationBadgeCount');

    socket.on('connect', () => {
        console.log('Socket.IO: Connected from homepage.');
    });

    socket.on('disconnect', () => {
        console.log('Socket.IO: Disconnected from homepage.');
    });

    // Listen for DM unread count updates
    socket.on('dm_unread_count_updated', (newCount) => {
        if (dmBadgeCount) {
            dmBadgeCount.textContent = newCount;
            dmBadgeCount.style.display = newCount > 0 ? 'block' : 'none';
        }
    });

    // Existing Notification JS (with minor adjustments for badge ID)
    const notificationsDropdown = document.getElementById('notificationsDropdown');
    const notificationList = document.getElementById('notificationList');

    async function fetchNotifications() {
        try {
            const response = await fetch('/notifications');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const notifications = await response.json();
            
            notificationList.innerHTML = '';

            if (notifications.length === 0) {
                notificationList.innerHTML = '<p class="no-notifications">No notifications.</p>';
                return;
            }

            let unreadIds = [];
            notifications.forEach(notif => {
                const item = document.createElement('a');
                if (notif.type === 'followRequest' && notif.followRequestId) {
                    item.href = `/profile`; 
                } else {
                    item.href = `/profile/${notif.senderId._id}`; 
                }
                
                item.classList.add('notification-item');
                if (!notif.read) {
                    item.classList.add('unread');
                    unreadIds.push(notif._id);
                }

                let notificationMessage = '';
                let senderName = notif.senderId ? (notif.senderId.nickname || notif.senderId.email) : 'Someone';
                
                let senderProfilePicSrc = notif.senderId && notif.senderId.profilePic 
                    ? (notif.senderId.profilePic.startsWith('/') 
                        ? notif.senderId.profilePic 
                        : '/uploads/profile_pics/' + notif.senderId.profilePic)
                    : '/default_profile.jpg';

                if (notif.type === 'like') {
                    notificationMessage = `<strong>${senderName}</strong> liked your post.`;
                } else if (notif.type === 'comment') {
                    notificationMessage = `<strong>${senderName}</strong> commented: "${notif.commentText}"`;
                } else if (notif.type === 'followRequest') {
                    if (notif.followRequestId) {
                        notificationMessage = `<strong>${senderName}</strong> wants to follow you.`;
                    } else {
                        notificationMessage = `<strong>${senderName}</strong> accepted your follow request!`;
                    }
                }

                item.innerHTML = `
                    <img src="${senderProfilePicSrc}" 
                         alt="Sender Profile" onerror="this.src='/default_profile.jpg'">
                    <div class="notification-content">
                        ${notificationMessage}
                        <span class="time">${new Date(notif.createdAt).toLocaleString()}</span>
                    </div>
                `;
                notificationList.appendChild(item);
            });

            if (unreadIds.length > 0) {
                markNotificationsAsRead(unreadIds);
            }

        } catch (error) {
            console.error('Error fetching notifications:', error);
            notificationList.innerHTML = '<p class="no-notifications" style="color:red;">Failed to load notifications.</p>';
        }
    }

    async function markNotificationsAsRead(idsToMark) {
        try {
            const response = await fetch('/notifications/mark-read', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ notificationIds: idsToMark })
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            if (notificationBadgeCount) {
                notificationBadgeCount.textContent = 0;
                notificationBadgeCount.style.display = 'none';
            }
        } catch (error) {
            console.error('Error marking notifications as read:', error);
        }
    }

    function toggleNotifications() {
        notificationsDropdown.classList.toggle('show');
        if (notificationsDropdown.classList.contains('show')) {
            fetchNotifications();
        }
    }

    window.onclick = function(event) {
        if (!event.target.matches('.notification-icon-container') && !event.target.closest('.notification-icon-container') &&
            !event.target.matches('.dm-icon-container') && !event.target.closest('.dm-icon-container') &&
            !event.target.matches('.chatbot-icon-container') && !event.target.closest('.chatbot-icon-container')) { // Added chatbot icon check
            
            if (notificationsDropdown.classList.contains('show')) {
                notificationsDropdown.classList.remove('show');
            }
        }
    }
</script>

</body>
</html>
